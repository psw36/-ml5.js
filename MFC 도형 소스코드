// mfc12View.cpp : implementation of the Cmfc12View class
//

#include "pch.h"
#include "framework.h"
#ifndef SHARED_HANDLERS
#include "mfc12.h"
#endif

#include "mfc12Doc.h"
#include "mfc12View.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif

// Cmfc12View

IMPLEMENT_DYNCREATE(Cmfc12View, CView)

BEGIN_MESSAGE_MAP(Cmfc12View, CView)
    // 표준 인쇄 명령입니다.
    ON_COMMAND(ID_FILE_PRINT, &CView::OnFilePrint)
    ON_COMMAND(ID_FILE_PRINT_DIRECT, &CView::OnFilePrint)
    ON_COMMAND(ID_FILE_PRINT_PREVIEW, &CView::OnFilePrintPreview)
    ON_WM_MOUSEMOVE()
END_MESSAGE_MAP()

// Cmfc12View 생성/소멸

Cmfc12View::Cmfc12View() noexcept
{
    // TODO: 여기에 생성 코드를 추가합니다.
}

Cmfc12View::~Cmfc12View()
{
}

BOOL Cmfc12View::PreCreateWindow(CREATESTRUCT& cs)
{
    // TODO: CREATESTRUCT cs를 수정하여 여기에서
    //  Window 클래스 또는 스타일을 수정합니다.

    return CView::PreCreateWindow(cs);
}

// Cmfc12View 그리기

CPoint pnt;
void Cmfc12View::OnDraw(CDC* pDC)
{
    Cmfc12Doc* pDoc = GetDocument();
    ASSERT_VALID(pDoc);
    if (!pDoc)
        return;


    pDC->Rectangle(pnt.x - 150, pnt.y - 150, pnt.x + 150, pnt.y + 150);

    POINT triangle1[3] = {
        { pnt.x / 2, pnt.y + 25 },        // Top vertex
        { pnt.x - 150, pnt.y + 150 },  // Bottom left vertex
        { pnt.x + 150, pnt.y + 150 }   // Bottom right vertex
    };
    pDC->Polygon(triangle1, 3);

    POINT triangle2[3] = {
        { pnt.x / 2, pnt.y + 25 },        // Bottom vertex
        { pnt.x - 150, pnt.y - 150 },  // Top left vertex
        { pnt.x + 150, pnt.y - 150 }   // Top right vertex
    };
    pDC->Polygon(triangle2, 3);
    pDC->TextOutW(pnt.x - 30, pnt.y + 30, L"GRAHPICS");

}

// Cmfc12View 인쇄

BOOL Cmfc12View::OnPreparePrinting(CPrintInfo* pInfo)
{
    // 기본적인 준비
    return DoPreparePrinting(pInfo);
}

void Cmfc12View::OnBeginPrinting(CDC* /*pDC*/, CPrintInfo* /*pInfo*/)
{
    // TODO: 인쇄하기 전에 추가 초기화 작업을 추가합니다.
}

void Cmfc12View::OnEndPrinting(CDC* /*pDC*/, CPrintInfo* /*pInfo*/)
{
    // TODO: 인쇄 후 정리 작업을 추가합니다.
}

// Cmfc12View 진단

#ifdef _DEBUG
void Cmfc12View::AssertValid() const
{
    CView::AssertValid();
}

void Cmfc12View::Dump(CDumpContext& dc) const
{
    CView::Dump(dc);
}

Cmfc12Doc* Cmfc12View::GetDocument() const // 디버그되지 않은 버전은 인라인으로 지정됩니다.
{
    ASSERT(m_pDocument->IsKindOf(RUNTIME_CLASS(Cmfc12Doc)));
    return (Cmfc12Doc*)m_pDocument;
}
#endif //_DEBUG

// Cmfc12View 메시지 처리기

void Cmfc12View::OnMouseMove(UINT nFlags, CPoint point)
{

    pnt = point;

    Invalidate(true);
    CView::OnMouseMove(nFlags, point);
}
